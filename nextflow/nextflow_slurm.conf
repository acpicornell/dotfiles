params {
  // Configure config creator
  config_profile_description = 'IiSGM SLURM profile in single nodes'
  config_profile_contact     = 'Antonio Picornell (@iisgm.com)'
  config_profile_url         = 'https://www.iisgm.com'

  // Maximum hardware and time resources
  max_memory = 100.GB
  max_cpus   = 32
  max_time   = 120.h
}

// Singularity parameters
singularity {
  enabled    = true
  cacheDir   = '/mnt/storage/singularity/cache'
  autoMounts = true
}

// Submit up to 50 jobs at once with 15 secs between to avoid spamming the cluster
executor {
     queueSize    = 50
     pollInterval = '15 sec'
}

process {
  // Executor options
  executor = 'slurm'
  queue    = 'bioinfo'
  scratch  = '/mnt/storage/scratch'

  // Error and retry handling
  maxRetries    = 5
  errorStrategy = { task.exitStatus in [143,137,104,134,139,71,255] ? 'retry' : 'finish' }
}

// Function to ensure that resource requirements don't go beyond limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Clean up cache and work directories on successful completion
cleanup = true

// Allows to override the default cleanup = true behaviour for debugging
debug {
  cleanup = false
}

trace {
  trace.overwrite = true
}

